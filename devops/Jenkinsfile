pipeline { 
    agent any 
    environment { 
        INSTAGRAM_NERIO = '@Nerio' 
    }
    tools {
        jdk 'Java17'
        maven 'Maven'
    }
    options {
        skipDefaultCheckout(true)
    }

    stages {
        stage('check env') {
            steps {
                sh "mvn -v"
                sh "java -version"
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Extract Version') {
            steps {
                script {
                    def version = sh(script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true).trim()
                    env.APP_VERSION = version
                    sh "echo ${env.APP_VERSION}"
                }
            }
        }

        stage('Test') {
            steps {
                configFileProvider([configFile(fileId: 'vehicle-maven-artifactory-settings', variable: 'MAVEN_SETTINGS')]) {
                    sh 'mvn -s $MAVEN_SETTINGS test --batch-mode'
                }
            }
        }

        stage('Package') {
            steps {
                configFileProvider([configFile(fileId: 'vehicle-maven-artifactory-settings', variable: 'MAVEN_SETTINGS')]) {
                    sh 'mvn -s $MAVEN_SETTINGS package --batch-mode'
                }
            }
        }

        stage('Verify') {
            steps {
                configFileProvider([configFile(fileId: 'vehicle-maven-artifactory-settings', variable: 'MAVEN_SETTINGS')]) {
                    sh 'mvn -s $MAVEN_SETTINGS verify --batch-mode'
                }
            }
        }

        stage('Install') {
            steps {
                configFileProvider([configFile(fileId: 'vehicle-maven-artifactory-settings', variable: 'MAVEN_SETTINGS')]) {
                    sh 'mvn -s $MAVEN_SETTINGS install --batch-mode'
                }
            }
        }

        stage ('Report Junit') {
            steps {
                step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml', healthScaleFactor: 1.0])
                    junit '**/target/surefire-reports/TEST-*.xml'
            }
        }

        stage ('Artifact') {
            steps {
                step([$class: 'ArtifactArchiver', artifacts: '**/target/*.jar', fingerprint: true])
            }
        }

        stage('Sonar-scanner Analysis') {
            steps{
                script{
                    withSonarQubeEnv('sonarqube-10.6')
                    {
                        configFileProvider([configFile(fileId: 'vehicle-maven-artifactory-settings', variable: 'MAVEN_SETTINGS')]) {
                            sh "mvn -s $MAVEN_SETTINGS sonar:sonar -Pcoverage \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_AUTH_TOKEN} \
                            -Dsonar.projectName=${JOB_BASE_NAME} \
                            -Dsonar.projectKey=${JOB_BASE_NAME} \
                            -Dsonar.sources=src/main/java \
                            -Dsonar.java.libraries=target/ \
                            -Dsonar.java.binaries=target/classes \
                            -Dsonar.language=java \
                            -Dsonar.qualitygate.wait=true \
                            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                            --batch-mode"
                        }
                    }
                }
            }
        }

        stage('Deploy Jar - Nexus') {
            steps {
                configFileProvider([configFile(fileId: 'vehicle-maven-artifactory-settings', variable: 'MAVEN_SETTINGS')]) {
                    sh 'mvn -s $MAVEN_SETTINGS package deploy --batch-mode'
                }
            }
        }
    }
}